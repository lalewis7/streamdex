[{"D:\\streamfinder\\client\\src\\App.js":"1","D:\\streamfinder\\client\\src\\Home.js":"2","D:\\streamfinder\\client\\src\\Nav.js":"3","D:\\streamfinder\\client\\src\\Settings.js":"4","D:\\streamfinder\\client\\src\\Login.js":"5","D:\\streamfinder\\client\\src\\reportWebVitals.js":"6","D:\\streamfinder\\client\\src\\Search.js":"7","D:\\streamfinder\\client\\src\\Profile.js":"8","D:\\streamfinder\\client\\src\\Title.js":"9"},{"size":2137,"mtime":1618970998867,"results":"10","hashOfConfig":"11"},{"size":1788,"mtime":1621637062513,"results":"12","hashOfConfig":"11"},{"size":4301,"mtime":1618970437740,"results":"13","hashOfConfig":"11"},{"size":1112,"mtime":1618938790150,"results":"14","hashOfConfig":"11"},{"size":14751,"mtime":1618970038289,"results":"15","hashOfConfig":"11"},{"size":375,"mtime":1618938790153,"results":"16","hashOfConfig":"11"},{"size":2179,"mtime":1618938790150,"results":"17","hashOfConfig":"11"},{"size":6803,"mtime":1618938790149,"results":"18","hashOfConfig":"11"},{"size":6838,"mtime":1618938790151,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"sifqvh",{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\streamfinder\\client\\src\\App.js",["43","44","45"],"import logo from './logo.svg';\r\nimport './App.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// import react router components\r\nimport {\r\n  BrowserRouter,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\n// import all pages\r\nimport Home from './Home.js';\r\nimport Discover from './Discover.js';\r\nimport NotFound from './NotFound.js';\r\nimport Search from './Search.js';\r\nimport Nav from './Nav.js';\r\nimport Title from './Title.js';\r\nimport Login from './Login.js';\r\nimport Settings from './Settings.js';\r\nimport Profile from './Profile.js';\r\nimport Streams from './Streams.js';\r\n\r\nclass App extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      token: sessionStorage.getItem('token'),\r\n      user: sessionStorage.getItem('user') ? JSON.parse(sessionStorage.getItem('user')) : null,\r\n    }\r\n\r\n    this.setToken = this.setToken.bind(this);\r\n    this.setUser = this.setUser.bind(this);\r\n\r\n  }\r\n\r\n  setToken(val) {\r\n    if (val!=null)\r\n      sessionStorage.setItem(\"token\", val);\r\n    else\r\n      sessionStorage.removeItem(\"token\");\r\n    this.setState({token: val});\r\n  }\r\n\r\n  setUser(val){\r\n    if (val!=null)\r\n      sessionStorage.setItem(\"user\", JSON.stringify(val));\r\n    else\r\n      sessionStorage.removeItem(\"user\");\r\n    this.setState({user: val});\r\n  }\r\n\r\n  render(){\r\n    return (<div>\r\n      <BrowserRouter>\r\n        <Nav setToken={this.setToken} state = {{token: this.state.token, user: this.state.user}}/>\r\n        <Login setToken={this.setToken} setUser={this.setUser} />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/discover\" component={Discover} />\r\n          <Route path=\"/search\" component={Search} />\r\n          <Route path=\"/title/:id\" component={Title} />\r\n          <Route path=\"/account\" component={Profile} />\r\n          <Route path=\"/streams\" component={Streams} />\r\n          <Route render={() => <NotFound/>} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>);\r\n  }\r\n\r\n}\r\n\r\nfunction AppExport() {\r\n\r\n  return (\r\n    <div>\r\n      <App />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppExport;\r\n",["46","47"],"D:\\streamfinder\\client\\src\\Home.js",["48","49"],"D:\\streamfinder\\client\\src\\Nav.js",["50","51","52","53","54"],"D:\\streamfinder\\client\\src\\Settings.js",["55","56","57","58","59"],"import React, { Profiler } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Settings extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        var accClass = \"\";\r\n        if (window.location.pathname == \"/account\")\r\n            accClass = \"active\";\r\n        var strClass = \"\";\r\n        if (window.location.pathname == \"/streams\")\r\n            strClass = \"active\";\r\n        return (<div>\r\n            <div class=\"card m-4 bg-light\">\r\n                <h3 class=\"m-3\">Settings</h3>\r\n                <ul class=\"nav nav-tabs\">\r\n                    <li class=\"nav-item\">\r\n                        <a class={\"nav-link \"+ accClass} href=\"/account\">Account</a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <a class={\"nav-link \" + strClass} href=\"/streams\">Streaming Services</a>\r\n                    </li>\r\n                </ul>\r\n                <div class=\"card-body\">\r\n                    {this.props.content}\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n\r\n}\r\n\r\nexport default Settings;","D:\\streamfinder\\client\\src\\Login.js",["60","61","62"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Config from './config.js';\r\nimport $ from 'jquery'; \r\n\r\nvar Storage = require('./storage.js');\r\nvar Validate = require('./validate.js');\r\n\r\n/**\r\n * Contains all inputs and labels for signup form\r\n * Used as child component for Login\r\n */\r\nclass SignupForm extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            // form data\r\n            username: '',\r\n            email: '',\r\n            password: '',\r\n            passwordConfirm: '',\r\n\r\n            // input classes (bootstrap and design changes)\r\n            usernameClass: '',\r\n            emailClass: '',\r\n            passwordClass: '',\r\n            passwordConfirmClass: '',\r\n\r\n            // invalid messages\r\n            usernameInvalid: '',\r\n        }\r\n        // bind this\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.usernameChange = this.usernameChange.bind(this);\r\n        this.usernameValidate = this.usernameValidate.bind(this);\r\n        this.emailChange = this.emailChange.bind(this);\r\n        this.emailValidate = this.emailValidate.bind(this);\r\n        this.passwordChange = this.passwordChange.bind(this);\r\n        this.passwordValidate = this.passwordValidate.bind(this);\r\n        this.passwordConfirmChange = this.passwordConfirmChange.bind(this);\r\n        // update parent\r\n        this.sendData();\r\n    }\r\n\r\n    /**\r\n     * Sends data to parent.\r\n     */\r\n    sendData = () => {\r\n        this.props.getData({\r\n            username: this.state.username,\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n            passwordConfirm: this.state.passwordConfirm\r\n        });\r\n    }\r\n\r\n    /**\r\n     * called from onChange and changes any input in the component state with name = value\r\n     * @param {Object} evt \r\n     */\r\n    handleChange (evt) {\r\n        this.setState({ [evt.target.name]: evt.target.value }, () => {\r\n            this.sendData();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles changes to username input\r\n     * Checks if username is already taken\r\n     * @param {Object} evt \r\n     */\r\n    usernameChange (evt) {\r\n        // set value\r\n        this.setState({username: evt.target.value}, () => {\r\n            this.sendData();\r\n        });\r\n        // validate data\r\n        if (Validate.username(evt.target.value))\r\n            this.setState({usernameClass: \"is-valid\"});\r\n        // check if username is available\r\n        fetch(Config.API+\"handle/\"+evt.target.value)\r\n        .then(res => {\r\n            if (res.status == 200 && Validate.username(evt.target.value))\r\n                this.setState({usernameClass: \"is-valid\"});\r\n            if (res.status != 200)\r\n                this.setState({usernameClass: \"is-invalid\", usernameInvalid: \"Username already taken.\"});\r\n        }, \r\n        err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if username is valid\r\n     * Used for onBlur event (input losses focus)\r\n     * @param {Object} evt \r\n     */\r\n    usernameValidate (evt) {\r\n        if (!Validate.username(evt.target.value))\r\n            this.setState({usernameClass: \"is-invalid\", usernameInvalid: \"Username must be 4-32 characters long and only contain letters and digits.\"});\r\n    }\r\n\r\n    /**\r\n     * Handles changes to email input\r\n     * @param {Object} evt \r\n     */\r\n    emailChange (evt) {\r\n        // set value\r\n        this.setState({email: evt.target.value}, () => {\r\n            this.sendData();\r\n        });\r\n        // email not required (no value is ok)\r\n        if (evt.target.value === \"\")\r\n            this.setState({emailClass: \"\"});\r\n        // validate email\r\n        if (Validate.email(evt.target.value))\r\n            this.setState({emailClass: \"is-valid\"});\r\n    }\r\n\r\n    /**\r\n     * Checks if email is valid\r\n     * @param {Object} evt \r\n     */\r\n    emailValidate (evt) {\r\n        if (!Validate.email(evt.target.value) && evt.target.value !== \"\")\r\n            this.setState({emailClass: \"is-invalid\"});\r\n    }\r\n\r\n    /**\r\n     * Handles changes to password input\r\n     * @param {Object} evt \r\n     */\r\n    passwordChange(evt){\r\n        this.setState({password: evt.target.value}, () => {\r\n            this.sendData();\r\n        });\r\n        if (Validate.password(evt.target.value))\r\n            this.setState({passwordClass: \"is-valid\"})\r\n        if (!Validate.password(evt.target.value))\r\n            this.setState({passwordClass: \"is-invalid\"});\r\n    }\r\n\r\n    /**\r\n     * Checks if password is valid\r\n     * @param {Object} evt \r\n     */\r\n    passwordValidate (evt) {\r\n        console.log(\"here\");\r\n        if (!Validate.password(evt.target.value))\r\n            this.setState({passwordClass: \"is-invalid\"});\r\n    }\r\n\r\n    /**\r\n     * Handles changes to confirm password change\r\n     * @param {Object} evt \r\n     */\r\n    passwordConfirmChange(evt){\r\n        // set value\r\n        this.setState({passwordConfirm: evt.target.value}, () => {\r\n            this.sendData();\r\n        });\r\n        // only set to not valid if value is more or equal characters\r\n        if (this.state.password !== evt.target.value && evt.target.value.length >= this.state.password.length)\r\n            this.setState({passwordConfirmClass: \"is-invalid\"});\r\n        else if (this.state.password === \"\")\r\n            this.setState({passwordConfirmClass: \"\"});\r\n        else if (this.state.password === evt.target.value)\r\n            this.setState({passwordConfirmClass: \"is-valid\"});\r\n    }\r\n\r\n    render(){\r\n        return <div>\r\n            <div class=\"form-group\">\r\n                <label for=\"signupUsername\">Username</label>\r\n                <input type=\"text\" class={\"form-control \"+this.state.usernameClass} id=\"signupUsername\" placeholder=\"Username\" value={this.state.username} onChange={this.usernameChange} onBlur={this.usernameValidate}/>\r\n                <div class=\"invalid-feedback\">{this.state.usernameInvalid}</div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"signupEmail\">Email</label>\r\n                <input type=\"email\" class={\"form-control \"+this.state.emailClass} id=\"signupEmail\" placeholder=\"Email\" value={this.state.email} onChange={this.emailChange} onBlur={this.emailValidate}/>\r\n                <div class=\"invalid-feedback\">Email invalid.</div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"signupPassword\">Password</label>\r\n                <input type=\"password\" class={\"form-control \"+this.state.passwordClass} id=\"signupPassword\" placeholder=\"Password\" value={this.state.password} onChange={this.passwordChange} onBlur={this.passwordValidate}/>\r\n                <div class=\"invalid-feedback\">Password must be 8-64 characters long.</div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"signupPasswordConfirm\">Confirm Password</label>\r\n                <input type=\"password\" class={\"form-control \"+this.state.passwordConfirmClass} id=\"signupPasswordConfirm\" placeholder=\"Confirm Password\" value={this.state.passwordConfirm} onChange={this.passwordConfirmChange} />\r\n                <div class=\"invalid-feedback\">Passwords do not match.</div>\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            // form data\r\n            user: '',\r\n            password: '',\r\n        };\r\n        // bind this\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.passwordChange = this.passwordChange.bind(this);\r\n        // update parent\r\n        this.sendData();\r\n    }\r\n\r\n    sendData = () => {\r\n        this.props.getData({\r\n            user: this.state.user,\r\n            password: this.state.password\r\n        });\r\n    }\r\n\r\n    handleChange (evt) {\r\n        this.setState({ [evt.target.name]: evt.target.value }, () => {\r\n            this.sendData();\r\n        });\r\n    }\r\n\r\n    passwordChange (evt) {\r\n        this.setState({password: evt.target.value}, () => {\r\n            this.sendData();\r\n        });\r\n        this.setState({passwordClass: \"\"});\r\n    }\r\n\r\n    render(){\r\n        return <div>\r\n            <div class=\"form-group\">\r\n                <label for=\"loginUsername\">Username / Email</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"loginUsername\" placeholder=\"Username or Email\" value={this.state.user} name=\"user\" onChange={this.handleChange}/>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"loginPassword\">Password</label>\r\n                <input type=\"password\" class={\"form-control \"+this.props.passwordClass} id=\"loginPassword\" placeholder=\"Password\" value={this.state.password} name=\"loginPassword\" onChange={this.passwordChange} />\r\n                <div class=\"invalid-feedback\">Username or password incorrect. Please try again.</div>\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nclass Login extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            // is modal visible\r\n            showLoginPage: true,\r\n            loginData: {},\r\n            signupData: {},\r\n            loginError: 'test',\r\n            passwordClass: ''\r\n        }\r\n        // bind this\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.swapPage = this.swapPage.bind(this);\r\n        this.signup = this.signup.bind(this);\r\n        this.login = this.login.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Sets state login data used as callback for children.\r\n     * @param {Object} data \r\n     */\r\n    loginDataCB = (data) => {\r\n        this.setState({loginData: data});\r\n    }\r\n\r\n    /**\r\n     * Sets state signup data used as callback for children.\r\n     * @param {Object} data \r\n     */\r\n    signupDataCB = (data) => {\r\n        this.setState({signupData: data});\r\n    }\r\n\r\n    handleChange (evt) {\r\n        this.setState({ [evt.target.name]: evt.target.value });\r\n    }\r\n\r\n    /**\r\n     * Signup attempt for user\r\n     * @param {Object} evt \r\n     */\r\n    signup (evt) {\r\n        evt.preventDefault();\r\n        // send post to create user\r\n        fetch(Config.API+\"users\", \r\n        {\r\n            method: 'POST', \r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({handle: this.state.signupData.username, email: this.state.signupData.email, \r\n                password: this.state.signupData.password})\r\n        })\r\n        .then(res => {\r\n            // successfully created user\r\n            if (res.ok)\r\n                // get token for newly created user\r\n                fetch(Config.API+\"auth\",\r\n                {\r\n                    method: \"GET\",\r\n                    headers: {'user': this.state.signupData.username, 'password': this.state.signupData.password}\r\n                })\r\n                .then(res => {\r\n                    if (res.ok){\r\n                        res.text().then(token => {\r\n                            Storage.setToken(token);\r\n                        });\r\n                    } else {\r\n                        console.log('Failed to login after signup');\r\n                    }\r\n                },\r\n                err => {\r\n                    console.log(err);\r\n                });\r\n                $('#loginModal').modal('hide');\r\n        }, err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Login attempt (pressed login btn)\r\n     * @param {Object} evt \r\n     */\r\n    login (evt) {\r\n        // do not submit form\r\n        evt.preventDefault();\r\n        console.log(this.state.loginData);\r\n        // attempt to get token\r\n        fetch(Config.API+\"auth\",\r\n        {\r\n            method: 'GET',\r\n            headers: {'user': this.state.loginData.user, 'password': this.state.loginData.password}\r\n        })\r\n        .then(res => {\r\n            // successful credentials\r\n            if (res.ok){\r\n                res.text().then(token => {\r\n                    // save token\r\n                    this.props.setToken(token);\r\n                    // remove login page\r\n                    $('#loginModal').modal('hide');\r\n                    // update self info\r\n                    fetch(Config.API+\"self\", {\r\n                        method: 'GET',\r\n                        headers: {'token': Storage.getToken()}\r\n                    })\r\n                    .then(res => res.json())\r\n                    .then(self => {\r\n                        this.props.setUser(self);\r\n                    });\r\n                });\r\n            }\r\n            // incorrect credentials\r\n            else{\r\n                this.setState({passwordClass: \"is-invalid\"});\r\n            }\r\n        },\r\n        err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    swapPage () {\r\n        this.setState({showLoginPage: !this.state.showLoginPage});\r\n    }\r\n\r\n    componentDidMount(){}\r\n\r\n    render(){\r\n        var formContents = (<div>\r\n            <div class=\"modal-header\">\r\n                <h5 class=\"modal-title text-center\" id=\"exampleModalLabel\">Login</h5>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <form onSubmit={this.login}>\r\n                    <LoginForm getData = {this.loginDataCB} passwordClass = {this.state.passwordClass} />\r\n                    <button type=\"submit\" class=\"btn btn-primary btn-block\">LOGIN</button>\r\n                    <button type=\"button\" class=\"btn btn-outline-secondary btn-block\" onClick={this.swapPage}>SIGN UP</button>\r\n                </form>\r\n            </div>\r\n        </div>);\r\n        if (!this.state.showLoginPage)\r\n            formContents = <div>\r\n                <div class=\"modal-header\">\r\n                    <h5 class=\"modal-title text-center\" id=\"exampleModalLabel\">Sign Up</h5>\r\n                </div>\r\n                <div class=\"modal-body\">\r\n                    <form onSubmit={this.signup}>\r\n                        <SignupForm getData = {this.signupDataCB} />\r\n                        <button type=\"submit\" class=\"btn btn-primary btn-block\">SIGN UP</button>\r\n                        <button type=\"button\" class=\"btn btn-outline-secondary btn-block\" onClick={this.swapPage}>LOGIN</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        return (<div class=\"modal fade\" id=\"loginModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"loginModalLabel\" aria-hidden=\"true\">\r\n            <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n                <div class=\"modal-content\">\r\n                    {formContents}\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(Login);",["63","64"],"D:\\streamfinder\\client\\src\\reportWebVitals.js",[],"D:\\streamfinder\\client\\src\\Search.js",["65","66","67"],"D:\\streamfinder\\client\\src\\Profile.js",["68","69","70","71"],"D:\\streamfinder\\client\\src\\Title.js",["72","73","74","75"],{"ruleId":"76","severity":1,"message":"77","line":1,"column":8,"nodeType":"78","messageId":"79","endLine":1,"endColumn":12},{"ruleId":"76","severity":1,"message":"80","line":4,"column":8,"nodeType":"78","messageId":"79","endLine":4,"endColumn":16},{"ruleId":"76","severity":1,"message":"81","line":21,"column":8,"nodeType":"78","messageId":"79","endLine":21,"endColumn":16},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"76","severity":1,"message":"80","line":2,"column":8,"nodeType":"78","messageId":"79","endLine":2,"endColumn":16},{"ruleId":"86","severity":1,"message":"87","line":7,"column":5,"nodeType":"88","messageId":"89","endLine":9,"endColumn":6},{"ruleId":"76","severity":1,"message":"80","line":2,"column":8,"nodeType":"78","messageId":"79","endLine":2,"endColumn":16},{"ruleId":"76","severity":1,"message":"90","line":5,"column":7,"nodeType":"78","messageId":"79","endLine":5,"endColumn":14},{"ruleId":"91","severity":1,"message":"92","line":24,"column":56,"nodeType":"93","messageId":"94","endLine":24,"endColumn":58},{"ruleId":"95","severity":1,"message":"96","line":44,"column":23,"nodeType":"97","endLine":44,"endColumn":79},{"ruleId":"95","severity":1,"message":"96","line":67,"column":25,"nodeType":"97","endLine":67,"endColumn":196},{"ruleId":"76","severity":1,"message":"98","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":25},{"ruleId":"76","severity":1,"message":"80","line":2,"column":8,"nodeType":"78","messageId":"79","endLine":2,"endColumn":16},{"ruleId":"86","severity":1,"message":"87","line":6,"column":5,"nodeType":"88","messageId":"89","endLine":8,"endColumn":6},{"ruleId":"91","severity":1,"message":"92","line":12,"column":38,"nodeType":"93","messageId":"94","endLine":12,"endColumn":40},{"ruleId":"91","severity":1,"message":"92","line":15,"column":38,"nodeType":"93","messageId":"94","endLine":15,"endColumn":40},{"ruleId":"76","severity":1,"message":"80","line":2,"column":8,"nodeType":"78","messageId":"79","endLine":2,"endColumn":16},{"ruleId":"91","severity":1,"message":"92","line":85,"column":28,"nodeType":"93","messageId":"94","endLine":85,"endColumn":30},{"ruleId":"91","severity":1,"message":"99","line":87,"column":28,"nodeType":"93","messageId":"94","endLine":87,"endColumn":30},{"ruleId":"82","replacedBy":"100"},{"ruleId":"84","replacedBy":"101"},{"ruleId":"76","severity":1,"message":"102","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":25},{"ruleId":"76","severity":1,"message":"80","line":2,"column":8,"nodeType":"78","messageId":"79","endLine":2,"endColumn":16},{"ruleId":"91","severity":1,"message":"92","line":21,"column":28,"nodeType":"93","messageId":"94","endLine":21,"endColumn":30},{"ruleId":"76","severity":1,"message":"98","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":25},{"ruleId":"76","severity":1,"message":"80","line":2,"column":8,"nodeType":"78","messageId":"79","endLine":2,"endColumn":16},{"ruleId":"91","severity":1,"message":"92","line":48,"column":28,"nodeType":"93","messageId":"94","endLine":48,"endColumn":30},{"ruleId":"91","severity":1,"message":"99","line":50,"column":28,"nodeType":"93","messageId":"94","endLine":50,"endColumn":30},{"ruleId":"76","severity":1,"message":"80","line":2,"column":8,"nodeType":"78","messageId":"79","endLine":2,"endColumn":16},{"ruleId":"103","severity":1,"message":"104","line":57,"column":32,"nodeType":"105","messageId":"106","endLine":57,"endColumn":34},{"ruleId":"107","severity":1,"message":"108","line":66,"column":21,"nodeType":"97","endLine":66,"endColumn":101},{"ruleId":"109","severity":1,"message":"110","line":113,"column":41,"nodeType":"97","endLine":113,"endColumn":143},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","'Settings' is defined but never used.","no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Storage' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Profiler' is defined but never used.","Expected '!==' and instead saw '!='.",["111"],["112"],"'useState' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","no-global-assign","no-unsafe-negation"]